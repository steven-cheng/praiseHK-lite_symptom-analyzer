{"version":3,"sources":["img/logo.svg","img/plus.svg","img/save.svg","img/more.svg","components/SymptomCard.js","utils/apiKeys_praise-service.js","utils/apiKeys_praise-ir-cal.js","components/usePrevious.js","components/MicroEnvSelect_Dialog.js","pages/Home.js","pages/Settings.js","pages/Chart.js","pages/ChartPoint_Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SymptomCard","props","useState","isOpenDeleteSymptomType_dialog","set_isOpenDeleteSymptomType_dialog","closeDeleteSymptomType_dialog","Card","style","marginTop","marginBottom","raised","CardContent","display","float","name","FormControlLabel","control","Checkbox","checked","isNull","onChange","event","onisNullChange","tempID","target","color","label","onClick","fontSize","cursor","Grid","container","spacing","alignItems","clear","item","xs","Slider","value","severity","onSeverityChange","step","min","max","minWidth","Dialog","open","onClose","DialogContent","DialogContentText","DialogActions","Button","deleteSymptomType","autoFocus","params_keys","myid","apikey","usePrevious","ref","useRef","useEffect","current","switchContainer_style","justifyContent","switchLabel_style","flex","marginLeft","MicroEnvSelect_Dialog","indoor","windowOpened","airPurifierOn","airConditionerOn","microEnvState","setMicroEnvState","handleButtonClicked","env","handleSwitchChange","isOpen","theme","useTheme","close","DialogTitle","palette","primary","main","Paper","elevation","paddingTop","ButtonGroup","variant","Switch","disabled","Home","path","state","toURL","setToURL","isOpenAddNewSymptomType_dialog","set_isOpenAddNewSymptomType_dialog","hoisted","error","newSymptomInputError_flag","set_newSymptomInputError_flag","isOpenSaveNewSymptoms_dialog","set_isOpenSaveNewSymptoms_dialog","newSymptoms","setNewSymptoms","prevNewSymptoms","addNewSymptomType_inputValue","set_addNewSymptomType_inputValue","confirmedSaveNewSymptoms","setConfirmedSaveNewSymptoms","getCurrentDateTime","currentDateTime","setCurrentDateTime","prevSaveNewSymptoms","saveNewSymptoms","setDeleteSymptomType","isOpenMicroEnvSelect_dialog","set_IsOpenMicroEnvSelect_dialog","microEnvStateRef","db","useContext","DatabaseContext","loader","SystemServiceContext","errorDialog","format","Date","close_addNewSymptomType_dialog","close_saveNewSymptoms_dialog","setSaveNewSymptoms","handle_isNull_changed","map","symptom","handle_severity_changed","i","symptomType","symptomTypes","newSymptom","typeName","every","prevNewSymptom","push","length","loaderSwitch","savedSymptomsPollutantsValue","chosenSymptom","chosenSymptomSeverity","startDate","savedSymptomsName","savedSymptomsSeverity","taskFailed_flag","lngLat","lng","lat","dateTime","dateTime_string","dateTime_isoString","toISOString","geolocationOptions","maximumAge","timeout","enableHighAccuracy","Promise","resolve","reject","window","navigator","geolocation","getCurrentPosition","then","position","coords","longitude","latitude","url_concentration","URL","params_concentration","todo","toString","t0","t1","pids","params_keys_praise_service","search","URLSearchParams","url_IR","inputData","params_IR","input_env","JSON","stringify","params_keys_praise_ir_cal","all","fetch","response","json","referrerPolicy","setErrorMsg","console","log","data_con","data_IR","status","data_adjusted","AQHI","AQHIBN","pctAR","NO2_con","NO2_IR","NO2","SO2_con","SO2_IR","SO2","O3_con","O3_IR","O3","PM2dot5_con","PM10_con","PM10_IR","PM10","beta","PM2dot5","pctAR_PM10","Math","exp","pctAR_PM2dot5","pctAR_PM","transaction","onerror","oncomplete","objectStore","forEach","newSymptom_forDB","datetime","coordinates","pollutantsValue","add","onsuccess","id","result","index","countPromises","countRequest","count","failedReason","counts","chosenSymptomIndex","indexOf","boundKeyRange","IDBKeyRange","bound","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","request","openCursor","startDate_string","parse","finally","highlightSymptom","highlightedSymptomCurrentSeverity","highlightedSymptomCurrentPollutantsValue","dateRange","start","end","setInterval","clearInterval","scrollBy","document","body","scrollHeight","transaction1","objectStore1","request1","openKeyCursor","only","delete","primaryKey","continue","objectStore2","request2","setSymptomTypes","filter","symptomCards","key","to","pathname","className","verticalAlign","textAlign","src","plusIcon","width","height","Typography","TextField","margin","helperText","trimmedNewSymptomTypeName","trim","newMicroEnvState","Settings","Divider","Chart","location","setSymptomType","prevSymptomType","currentSeverity","currentPollutantsValue","symptomHighlight","setSymptomHighlight","setDateRange","prevDateRange","dateRange_startTemp","set_dateRange_startTemp","pollutant","setPollutant","date_inDialog","set_date_inDialog","isOpenDatePickerDialog","setIsOpenDatePickerDialog","mountingChart","setMountingChart","chartCanvasRef","closeDatePickedInDatePickerDialog","changePollutant","newPollutant","a","index1","chosenSymptomTypeIndex","chosenSymptomType","index2","keyRange","data","Array","concentrationIntervalSize","j","iIndex","jIndex","floor","dataForHighLighting","symptomHighLight_indexes","dataForPlotting","concentration","radius","x","y","r","yAxisLabel","COLORS","yTickConfig","callback","parseInt","datasets","backgroundColor","replace","ChartJs","type","options","events","activeElements","bubble","hoverRadius","hitRadius","tooltips","enabled","legend","scales","xAxes","scaleLabel","labelString","yAxes","ticks","$","scrollTop","InputProps","endAdornment","InputAdornment","Select","MenuItem","Container","maxWidth","maxHeight","marginRight","orientation","size","onEnter","DatePicker","autoOk","disableToolbar","minDate","disableFuture","openTo","ChartPoint_details","spanColor","gutterBottom","fontWeight","component","React","createContext","UILocker","isUILockerOn","UILockerSwitch","UILockerRequireCount","isLoading","loaderRequireCount","App","history","useHistory","setIsUILockerOn","setIsLoading","title","contentText","errorDialogState","setErrorDialogState","setDB","indexedDB","onupgradeneeded","createObjectStore","keyPath","autoIncrement","createIndex","unique","default_symptom_types","symptom_types","containerBackgroundColor","currentPath","useLocation","Loader","isLocked","ErrorDialog","setState","Provider","onOff","errorTitle","errorContentText","AppBar","paddingBottom","Logo","render","ChartPoint_Details","bottom","BottomNavigation","substring","newPage","showLabels","BottomNavigationAction","icon","saveButton","left","WebkitTransform","transform","CircularProgress","thickness","closeDialog","Boolean","hostname","match","addEventListener","createMuiTheme","ReactDOM","StylesProvider","injectFirst","utils","DateFnsUtils","ThemeProvider","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.31655bdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fd291ecb.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.dd88e7d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.aaa4672f.svg\";","module.exports = __webpack_public_path__ + \"static/media/more.0d0660ce.svg\";","import React, {useState, useEffect, useRef} from 'react';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport moreIcon from \"../img/more.svg\";\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Grid from \"@material-ui/core/Grid\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from '@material-ui/core/Button';\n\n\nexport default function SymptomCard(props) {\n    const [sliderValue, setSliderValue] = useState(1);\n    const [isOpenDeleteSymptomType_dialog, set_isOpenDeleteSymptomType_dialog] = useState(false);\n\n\n    function handle_isNoInput_changed(event) {\n        props.onisNullChange(props.tempID, event.target.checked);\n    }\n\n    function handle_severity_changed(event, value) {\n        props.onSeverityChange(props.tempID, value);\n    }\n\n    function closeDeleteSymptomType_dialog() {\n        set_isOpenDeleteSymptomType_dialog(false);\n    }\n\n    function confirmDeleteSymptomType() {\n        props.deleteSymptomType(props.name);\n        closeDeleteSymptomType_dialog();\n    }\n\n\n    /** Rendering */\n    return (\n        <>\n            <Card\n                style={{\n                    marginTop:'10px',\n                    marginBottom:'10px',\n                }}\n                raised={true}\n            >\n                <CardContent>\n                    <div style={{ display:'inline-block', float:'left' }}>\n                        {props.name}\n                        &nbsp;&nbsp; ┇ &nbsp;&nbsp;\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={props.isNull}\n                                    onChange={handle_isNoInput_changed}\n                                    name=\"checkedB\"\n                                    color=\"primary\"\n                                />\n                            }\n                            label=\"No input\"\n                        />\n                    </div>\n                    <div style={{ display:'inline-block', float:'right' }}>\n                        {/*<img src={moreIcon} width={24} height={24} style={{ cursor:'pointer' }}/>*/}\n                        <DeleteForeverIcon\n                            onClick={ ()=>{set_isOpenDeleteSymptomType_dialog(true)} }\n                            style={{ fontSize:30, cursor:'pointer' }}\n                        />\n                    </div>\n                    <div style={{ display: props.isNull?'none':'block' }}>\n                        <Grid container spacing={2} alignItems='center' style={{ marginTop:'5px', clear:'both' }}>\n                            <Grid item xs>\n                                <Slider\n                                    value={props.severity}\n                                    onChange={handle_severity_changed}\n                                    step={1}\n                                    min={1}\n                                    max={5}\n                                />\n                            </Grid>\n                            <Grid item style={{minWidth:'2ch'}}>\n                                {props.severity}\n                            </Grid>\n                        </Grid>\n                    </div>\n                </CardContent>\n            </Card>\n            <br/>\n\n            {/* Delete 'symptom type' dialog */}\n            <Dialog\n                open={isOpenDeleteSymptomType_dialog}\n                onClose={closeDeleteSymptomType_dialog}\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        Are you sure? All the records of this symptom will be deleted and non-recoverable!\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={confirmDeleteSymptomType} color=\"primary\">\n                        Sure\n                    </Button>\n                    <Button onClick={closeDeleteSymptomType_dialog} color=\"primary\" autoFocus>\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </>\n    );\n}","const params_keys = {\n\n    /*-- APIkeys (start) --*/\n\n    /* APIKEY:Mobile (start) */\n    myid: 'ienv.praiseApp',\n    apikey: 'iCJ5pCxVVOaL',\n    /* APIKEY:Mobile (end) */\n    /* APIKEY:Praise-web (start) --\n    apikey: 'zYqwCLD6iz3j',\n    -- APIKEY:Praise-web (end) */\n    /* APIKEY:LocalDev (start) --\n    apikey: 'oEIiT1FeCv3m',\n    -- APIKEY:LocalDev (end) */\n\n    /*-- APIkeys (end) --*/\n\n};\n\nexport default params_keys;","const params_keys = {\n\n    /*-- APIkeys (start) --*/\n\n    /* APIKEY:Mobile (start) */\n    myid: 'praisehk-symanaly',\n    apikey: 'ApGJ2uglNlv1',\n    /* APIKEY:Mobile (end) */\n    /* APIKEY:Praise-web (start) --\n    apikey: 'kSRkxMvG3ZIe',\n    -- APIKEY:Praise-web (end) */\n    /* APIKEY:LocalDev (start) --\n    apikey: 'SgeP3H6gFKdq',\n    -- APIKEY:LocalDev (end) */\n\n    /*-- APIkeys (end) --*/\n\n};\n\nexport default params_keys;","import {useRef, useEffect} from 'react';\n\n\nexport default function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}","import React, {useState, useEffect, useRef, useContext} from 'react';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Switch from \"@material-ui/core/Switch\";\nimport {useTheme} from \"@material-ui/core/styles\";\n\n\nconst switchContainer_style = { display:'flex', justifyContent:'space-between', alignItems:'center' };\nconst switchLabel_style = {flex:'none', marginLeft:10};\n\n\nexport default function MicroEnvSelect_Dialog(props) {\n    const [microEnvState, setMicroEnvState] = useState({\n                                                indoor: false,\n                                                windowOpened: false,\n                                                airPurifierOn: false,\n                                                airConditionerOn: false\n                                            });\n\n\n    const handleButtonClicked = (env) => {\n        if(env==='indoor' && !microEnvState.indoor) {\n            setMicroEnvState({\n                indoor: true,\n                windowOpened: false,\n                airPurifierOn: false,\n                airConditionerOn: false\n            })\n        } else if(env === 'outdoor' && microEnvState.indoor) {\n            setMicroEnvState({\n                indoor: false,\n                windowOpened: false,\n                airPurifierOn: false,\n                airConditionerOn: false\n            })\n        }\n    }\n\n    const handleSwitchChange = (event) => {\n        setMicroEnvState({ ...microEnvState, [event.target.name]: event.target.checked });\n    };\n\n    const handleConfirmed = () => {\n        props.setMicroEnvState(microEnvState);\n        props.close();\n    }\n\n    useEffect(()=>{\n        if(props.isOpen) {\n            setMicroEnvState({\n                indoor: props.microEnvState.indoor,\n                windowOpened: props.microEnvState.windowOpened,\n                airPurifierOn: props.microEnvState.airPurifierOn,\n                airConditionerOn: props.microEnvState.airConditionerOn\n            })\n        }\n    },[props.isOpen])\n\n    /** Prepared for Rendering */\n    const theme = useTheme();\n\n    /** Rendering */\n    return (\n        <Dialog\n            open={props.isOpen}\n            onClose={props.close}\n        >\n            <DialogTitle style={{color:theme.palette.primary.main}} >\n                Micro Environment\n            </DialogTitle>\n            <DialogContent>\n                <Paper elevation={3} style={{minWidth:300, paddingTop:10}}>\n                    <div style={{...switchContainer_style, justifyContent:'center'}} >\n                        <div style={{flex:'none'}}>\n                            <ButtonGroup color=\"primary\">\n                                <Button\n                                    variant={microEnvState.indoor? 'contained':'outlined'}\n                                    onClick={()=>{handleButtonClicked('indoor')}}\n                                >\n                                    Indoor\n                                </Button>\n                                <Button\n                                    variant={microEnvState.indoor? 'outlined':'contained'}\n                                    onClick={()=>{handleButtonClicked('outdoor')}}\n                                >\n                                    Outdoor\n                                </Button>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                    <div style={switchContainer_style} >\n                        <p style={switchLabel_style}>Open Window</p>\n                        <div style={{flex:'none'}}>\n                            <Switch\n                                disabled={!microEnvState.indoor}\n                                checked={microEnvState.windowOpened}\n                                onChange={handleSwitchChange}\n                                name=\"windowOpened\"\n                                color='primary'\n                            />\n                        </div>\n                    </div>\n                    <div style={switchContainer_style} >\n                        <p style={switchLabel_style}>Air Purifier</p>\n                        <div style={{flex:'none'}}>\n                            <Switch\n                                disabled={!microEnvState.indoor}\n                                checked={microEnvState.airPurifierOn}\n                                onChange={handleSwitchChange}\n                                name=\"airPurifierOn\"\n                                color='primary'\n                            />\n                        </div>\n                    </div>\n                    <div style={switchContainer_style} >\n                        <p style={switchLabel_style}>Air-conditioner</p>\n                        <div style={{flex:'none'}}>\n                            <Switch\n                                disabled={!microEnvState.indoor}\n                                checked={microEnvState.airConditionerOn}\n                                onChange={handleSwitchChange}\n                                name=\"airConditionerOn\"\n                                color='primary'\n                            />\n                        </div>\n                    </div>\n                </Paper>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleConfirmed} color=\"primary\">\n                    Confirm\n                </Button>\n                <Button onClick={props.close} color=\"primary\" autoFocus>\n                    Cancel\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","import React, {useState, useEffect, useRef, useContext} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {DatabaseContext, SystemServiceContext} from '../App';\nimport Typography from \"@material-ui/core/Typography\";\nimport TodayIcon from '@material-ui/icons/Today';\nimport format from 'date-fns/format';\nimport parse from 'date-fns/parse';\nimport plusIcon from '../img/plus.svg';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport SymptomCard from \"../components/SymptomCard\";\nimport params_keys_praise_service from \"../utils/apiKeys_praise-service\";\nimport params_keys_praise_ir_cal from \"../utils/apiKeys_praise-ir-cal\";\nimport usePrevious from \"../components/usePrevious\";\nimport BusinessIcon from '@material-ui/icons/Business';\nimport MicroEnvSelect_Dialog from \"../components/MicroEnvSelect_Dialog\";\n\n\nexport default function Home(props) {\n    const [toURL, setToURL] = useState({path:null, state:null});\n    const [isOpenAddNewSymptomType_dialog, set_isOpenAddNewSymptomType_dialog] = useState(false);\n    const [newSymptomInputError_flag, set_newSymptomInputError_flag] = useState({hoisted:false, error:null});\n    const [isOpenSaveNewSymptoms_dialog, set_isOpenSaveNewSymptoms_dialog] = useState(false);\n    //const prevSymptomTypes = usePrevious(props.symptomTypes);\n    const [newSymptoms, setNewSymptoms] = useState([]);\n    const prevNewSymptoms = usePrevious(newSymptoms);\n    const [addNewSymptomType_inputValue, set_addNewSymptomType_inputValue] = useState('');\n    const [confirmedSaveNewSymptoms, setConfirmedSaveNewSymptoms] = useState(false);\n    const [currentDateTime, setCurrentDateTime] = useState(getCurrentDateTime());\n    const prevSaveNewSymptoms = usePrevious(props.saveNewSymptoms);\n    const [deleteSymptomType, setDeleteSymptomType] = useState(null);\n    const [isOpenMicroEnvSelect_dialog, set_IsOpenMicroEnvSelect_dialog] = useState(false);\n    const microEnvStateRef = useRef({\n                            indoor: false,\n                            windowOpened: false,\n                            airPurifierOn: false,\n                            airConditionerOn: false\n                        });\n\n    let db = useContext(DatabaseContext);\n    let loader = useContext(SystemServiceContext).loader;\n    let errorDialog = useContext(SystemServiceContext).errorDialog;\n\n\n    function setMicroEnvState(newMicroEnvState) {\n        microEnvStateRef.current = newMicroEnvState;\n    }\n\n    function getCurrentDateTime() {\n        return format(new Date(), 'dd MMMM yyyy  HH:mm');\n    }\n\n    function open_addNewSymptomType_dialog() {\n        set_isOpenAddNewSymptomType_dialog(true);\n    }\n\n    function close_addNewSymptomType_dialog() {\n        if(newSymptomInputError_flag.hoisted)\n            set_newSymptomInputError_flag({hoisted:false, error: null});\n        set_isOpenAddNewSymptomType_dialog(false);\n        set_addNewSymptomType_inputValue('');\n    }\n\n    function close_saveNewSymptoms_dialog() {\n        set_isOpenSaveNewSymptoms_dialog(false);\n        if(props.saveNewSymptoms) {\n            props.setSaveNewSymptoms(false);\n        }\n    }\n\n    function close_microEnvSelect_dialog() {\n        set_IsOpenMicroEnvSelect_dialog(false);\n    }\n\n    function userConfirmedSaveNewSymptoms() {\n        close_saveNewSymptoms_dialog();\n        setConfirmedSaveNewSymptoms(true);\n    }\n\n    function addNewSymptomType() {\n        const trimmedNewSymptomTypeName = addNewSymptomType_inputValue.trim();\n        if(trimmedNewSymptomTypeName === '') {\n            set_newSymptomInputError_flag({hoisted: true, error: 'Name cannot be empty'});\n            return;\n        }\n        let objectStore = db.transaction(['symptom_types'], 'readwrite').objectStore('symptom_types');\n        let request = objectStore.add({name: trimmedNewSymptomTypeName});\n        request.onsuccess = function (event) {\n            props.setSymptomTypes([...props.symptomTypes, trimmedNewSymptomTypeName]);\n            close_addNewSymptomType_dialog();\n        };\n        request.onerror = function (event) {\n            if(event.target.error.name === 'ConstraintError') {\n                console.log('Error : The symptom name is already existed');\n                set_newSymptomInputError_flag({hoisted:true, error:'The symptom name is already existed'});\n            } else {\n                console.log('Database Error : Unable to add symptom type.');\n            }\n        };\n    }\n\n    function handle_isNull_changed(tempID, isNull) {\n        setNewSymptoms(\n            newSymptoms.map((symptom)=>{\n                if(symptom.tempID === tempID) {\n                    symptom.isNull = isNull;\n                }\n                return symptom;\n            })\n        );\n    }\n\n    function handle_severity_changed(tempID, severity) {\n        setNewSymptoms(\n            newSymptoms.map((symptom)=>{\n                if(symptom.tempID === tempID) {\n                    symptom.severity = severity;\n                }\n                return symptom;\n            })\n        );\n    }\n\n    /** When mounted or updated, create a new symptom item for each type */\n    useEffect(()=>{\n        let newSymptoms = [];\n        for(let i=0; i<props.symptomTypes.length; i++) {\n            let symptomType = props.symptomTypes[i];\n\n            /* default symptom value */\n            let newSymptom = {\n                tempID: 'temp_'+symptomType,\n                typeName: symptomType,\n                isNull: true,\n                severity: 3\n            };\n\n            /* Use the previous value if that type still existed at re-render */\n            if(prevNewSymptoms) {\n                prevNewSymptoms.every( (prevNewSymptom) => {\n                    if(prevNewSymptom.typeName === symptomType) {\n                        newSymptom = prevNewSymptom;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                });\n            }\n\n            newSymptoms.push(newSymptom);\n        }\n\n        setNewSymptoms(newSymptoms);\n    }, [props.symptomTypes])\n\n\n    /** Show a confirmation dialog when 'save button is clicked */\n    useEffect(()=>{\n        if(!props.saveNewSymptoms)\n            return;\n        if(props.saveNewSymptoms && newSymptoms.length===0) {\n            props.setSaveNewSymptoms(false);\n            return;\n        }\n        if(props.saveNewSymptoms && !prevSaveNewSymptoms && newSymptoms.length>0) {\n            set_isOpenSaveNewSymptoms_dialog(true);\n        }\n    },[props.saveNewSymptoms])\n\n    /** Insert new symptoms into DB */\n    useEffect( ()=>{\n        if(confirmedSaveNewSymptoms) {\n            if(newSymptoms.length >0) {\n                loader.loaderSwitch('on');\n\n                let savedSymptomsName = [];\n                //let savedSymptomsNameNumberCount = [];\n                let savedSymptomsSeverity = [];\n                let savedSymptomsPollutantsValue;\n                let chosenSymptom;\n                let chosenSymptomSeverity;\n                let startDate;\n                let taskFailed_flag = false;\n\n                let lngLat = {lng:null, lat:null};\n                let dateTime = new Date();\n                let dateTime_string = format(dateTime, 'yyyy-MM-dd HH:mm');\n                let dateTime_isoString  = dateTime.toISOString();\n\n                getCurrentPosition({maximumAge:10000, timeout:20000, enableHighAccuracy:true})\n                .then((position)=>{\n                    lngLat.lng = position.coords.longitude;\n                    lngLat.lat = position.coords.latitude;\n\n                    let url_concentration = new URL('https://praise-web.ust.hk/uwsgi/praise-service/');\n                    let params_concentration = {\n                        todo: \"get_data\",\n                        lng: lngLat.lng.toString(),\n                        lat: lngLat.lat.toString(),\n                        t0:  dateTime_isoString,\n                        t1:  dateTime_isoString,\n                        pids: \"PM10,PM2.5,NO2,O3,SO2,AQHIBN,AQHIER\",\n                        ...params_keys_praise_service\n                    };\n                    url_concentration.search = new URLSearchParams(params_concentration).toString();\n\n                    let url_IR = new URL('https://praise-web.ust.hk/uwsgi/praise-ir-cal/');\n                    let microEnvState = microEnvStateRef.current;\n                    let inputData ={ \"IO\": microEnvState.indoor? 'Other Indoor':'Outdoor' };\n                    if(microEnvState.indoor) {\n                        inputData = {\n                            ...inputData,\n                            \"MicEnv\": [\n                                {\"Factor\":\"Window\", \"Option\": microEnvState.windowOpened? 'OPEN':'CLOSE'},\n                                {\"Factor\":\"Air Conditioner\", \"Option\": microEnvState.airConditionerOn? 'ON':'OFF'},\n                                {\"Factor\":\"Air Purifier\", \"Option\": microEnvState.airPurifierOn? 'ON':'OFF'}\n                            ]\n                        }\n                    }\n                    let params_IR = {\n                        todo: \"ir_cal\",\n                        input_env: JSON.stringify(inputData),\n                        ...params_keys_praise_ir_cal\n                    }\n                    url_IR.search = new URLSearchParams(params_IR).toString();\n\n                    return Promise.all([\n                        fetch(url_concentration).then(response=>response.json()),\n                        fetch(url_IR, {referrerPolicy:'origin'}).then(response=>response.json())\n                    ]);\n                }, (error)=>{\n                    errorDialog.setErrorMsg(null, 'Unable to get the position');\n                    console.log('cannot get position');\n                    taskFailed_flag = true;\n                })\n                .then( ([data_con, data_IR]) => {\n                    return new Promise((resolve,reject) => {\n                        if(data_con.status === 0 && data_IR.status === 0) {\n                            const data_adjusted = {\n                                AQHI: data_con.AQHIBN[0],\n                                pctAR: null,\n                                NO2_con: data_IR.NO2_IR * data_con.NO2[0],\n                                SO2_con: data_IR.SO2_IR * data_con.SO2[0],\n                                O3_con: data_IR.O3_IR * data_con.O3[0],\n                                PM2dot5_con: data_IR['PM2.5_IR'] * data_con['PM2.5'][0],\n                                PM10_con: data_IR.PM10_IR * data_con.PM10[0],\n                            }\n                            const beta = {\n                                NO2: 0.0004462559,\n                                SO2: 0.0001393235,\n                                O3: 0.0005116328,\n                                PM2dot5: 0.0002180567,\n                                PM10: 0.0002821751\n                            }\n                            const pctAR_PM10 = (Math.exp(beta.PM10*data_adjusted.PM10_con) - 1) * 100;\n                            const pctAR_PM2dot5 = (Math.exp(beta.PM2dot5*data_adjusted.PM2dot5_con) - 1) * 100;\n                            const pctAR_PM = pctAR_PM10>pctAR_PM2dot5 ? pctAR_PM10 : pctAR_PM2dot5;\n                            data_adjusted.pctAR = (Math.exp(beta.NO2*data_adjusted.NO2_con) - 1) * 100 +\n                                                (Math.exp(beta.SO2*data_adjusted.SO2_con) - 1) * 100 +\n                                                (Math.exp(beta.O3*data_adjusted.O3_con) - 1) * 100 +\n                                                pctAR_PM;\n\n                            let transaction = db.transaction(['symptoms_pollutants_relation'], 'readwrite');\n                            transaction.onerror = (event) => {reject('Error : Unable to insert new symptoms into the DB')};\n                            transaction.oncomplete = (event) => {resolve('All new symptoms are inserted into DB')};\n                            let objectStore = transaction.objectStore('symptoms_pollutants_relation');\n                            savedSymptomsPollutantsValue = {\n                                                            AQHI: data_adjusted.AQHI,\n                                                            pctAR: data_adjusted.pctAR,\n                                                            NO2: data_adjusted.NO2_con,\n                                                            SO2: data_adjusted.SO2_con,\n                                                            O3: data_adjusted.O3_con,\n                                                            PM2dot5: data_adjusted.PM2dot5_con,\n                                                            PM10: data_adjusted.PM10_con\n                                                        };\n                            newSymptoms.forEach((newSymptom)=>{\n                                if(!newSymptom.isNull) {\n                                    let newSymptom_forDB = {\n                                        datetime: dateTime_string,\n                                        coordinates: lngLat,\n                                        typeName: newSymptom.typeName,\n                                        severity: newSymptom.severity,\n                                        pollutantsValue: savedSymptomsPollutantsValue\n                                    };\n                                    let request = objectStore.add(newSymptom_forDB);\n                                    request.onsuccess = (event) => {\n                                        newSymptom.id = event.target.result;\n                                        newSymptom.datetime = dateTime_string;\n\n                                        savedSymptomsName.push(newSymptom.typeName);\n                                        savedSymptomsSeverity.push(newSymptom.severity);\n                                    }\n                                }\n                            });\n                        } else {\n                            reject('Error in the pollutant info: Downloaded data_con not valid');\n                        }\n                    })\n                }, (error) => {\n                    errorDialog.setErrorMsg(null, 'Error in downloading pollutant info: '+ error);\n                    console.log('Error in downloading pollutant info: ', error);\n                    taskFailed_flag = true;\n                })\n                .then((value) => { // After the new symptoms insertion is successfully done\n                    /*\n                    *  Among the saved symptoms, count which one is saved most (in the history).\n                    *  This one will be used to plot the chart in Chart.js (the user will be redirected to that page\n                    *  immediately after save)\n                    */\n                    const objectStore = db.transaction('symptoms_pollutants_relation').objectStore('symptoms_pollutants_relation');\n                    const index = objectStore.index('typeName');\n                    let countPromises = savedSymptomsName.map((typeName)=>{\n                                            let countRequest = index.count(typeName);\n                                            return new Promise((resolve, reject)=>{\n                                                countRequest.onsuccess = ()=>{\n                                                    resolve(countRequest.result);\n                                                };\n                                                countRequest.onerror = ()=>{\n                                                    reject();\n                                                };\n                                            });\n                                        });\n                    return Promise.all(countPromises);\n                }, (failedReason) => {\n                    errorDialog.setErrorMsg(null, failedReason);\n                    console.log(failedReason);\n                    taskFailed_flag = true;\n                })\n                .then((counts) => { // retrieve the start recording date of the chosen symptom\n                    return new Promise((resolve,reject) => {\n                        const chosenSymptomIndex = counts.indexOf(Math.max(...counts));\n                        chosenSymptom = savedSymptomsName[chosenSymptomIndex];\n                        chosenSymptomSeverity = savedSymptomsSeverity[chosenSymptomIndex];\n                        const objectStore = db.transaction('symptoms_pollutants_relation').objectStore('symptoms_pollutants_relation');\n                        const index = objectStore.index('typeName,datetime,severity');\n                        const boundKeyRange = IDBKeyRange.bound(\n                            [chosenSymptom, '2000-01-01 00:00', Number.MIN_SAFE_INTEGER],\n                            [chosenSymptom, '9999-12-31 00:00', Number.MAX_SAFE_INTEGER]\n                        );\n                        const request = index.openCursor(boundKeyRange);\n                        request.onsuccess = (event)=>{\n                            let cursor = event.target.result;\n                            if(cursor) {\n                                resolve(cursor.value.datetime) // we just need the 1st record\n                            }\n                        };\n                        request.onerror = ()=> {\n                            reject();\n                        };\n                    });\n                }, ()=>{\n                    console.log('Counting of the no. of the types in the database failed');\n                    errorDialog.setErrorMsg(null, 'Database counting operation failed');\n                    taskFailed_flag = true;\n                })\n                .then((startDate_string)=>{\n                    startDate = parse(startDate_string, 'yyyy-MM-dd HH:mm', new Date());\n                }, ()=>{\n                    console.log('Starting date retrieval in the database failed');\n                    errorDialog.setErrorMsg(null, 'Database \"starting date retrieval\" operation failed');\n                    taskFailed_flag = true;\n                })\n                .finally(()=>{\n                    loader.loaderSwitch('off');\n                    setConfirmedSaveNewSymptoms(false);\n                    props.setSaveNewSymptoms(false);\n                    // redirect to the chart page with data\n                    if(!taskFailed_flag) {\n                        setToURL({\n                            path: '/chart',\n                            state: {\n                                symptom:chosenSymptom,\n                                highlightSymptom: true,\n                                highlightedSymptomCurrentSeverity: chosenSymptomSeverity,\n                                highlightedSymptomCurrentPollutantsValue: savedSymptomsPollutantsValue,\n                                dateRange: {start: startDate, end: new Date()}\n                            }\n                        });\n                    }\n                });\n            } else {\n                props.setSaveNewSymptoms(false);\n            }\n        }\n    },[confirmedSaveNewSymptoms]);\n\n    /** Set Current Date & Time and refresh it after some short time */\n    useEffect(()=>{\n        const id = setInterval(()=>{setCurrentDateTime(getCurrentDateTime())}, 30000);\n        return(()=>{clearInterval(id)});\n    },[]);\n\n    /** Scroll down to the bottom of the page after new symptom added (to enhance the user experience only) */\n    useEffect(()=>{\n        if(\n            prevNewSymptoms &&\n            prevNewSymptoms.length !== 0 &&\n            prevNewSymptoms.length < newSymptoms.length\n        ) {\n            window.scrollBy(0,document.body.scrollHeight);\n        }\n    }, [newSymptoms]);\n\n\n    /** Delete a type of symptom */\n    useEffect(()=>{\n        if(deleteSymptomType) {\n            const transaction1 = db.transaction(['symptoms_pollutants_relation'],'readwrite');\n            const objectStore1 = transaction1.objectStore('symptoms_pollutants_relation');\n            const index1 = objectStore1.index('typeName');\n            const request1 = index1.openKeyCursor(IDBKeyRange.only(deleteSymptomType));\n            request1.onsuccess = () => {\n                let cursor = request1.result;\n                if(cursor) {\n                    objectStore1.delete(cursor.primaryKey);\n                    cursor.continue();\n                }\n            }\n            transaction1.oncomplete = () => {\n                const transaction2 = db.transaction(['symptom_types'],'readwrite');\n                const objectStore2 = transaction2.objectStore('symptom_types');\n                const index2 = objectStore2.index('symptom_type_name');\n                const request2 = index2.openKeyCursor(IDBKeyRange.only(deleteSymptomType));\n                request2.onsuccess = () => {\n                    let cursor = request2.result;\n                    if(cursor) {\n                        objectStore2.delete(cursor.primaryKey);\n                        cursor.continue();\n                    } else { // When all are done for the database part\n                        props.setSymptomTypes(\n                            props.symptomTypes.filter((symptomType)=>{\n                                return (symptomType !== deleteSymptomType);\n                            })\n                        )\n                    }\n                }\n                request2.onerror = () => {\n                    console.log('Error occurred when deleting symptom type records in \"symptom_types\"');\n                }\n            }\n            transaction1.onerror = () => {\n                console.log('Error occurred when deleting symptom records in \"symptoms_pollutants_relation\"');\n            }\n\n            setDeleteSymptomType(null);\n        }\n    },[deleteSymptomType])\n\n    /** Prepare for rendering */\n    const symptomCards = newSymptoms.map((symptom)=>{\n            /* Return a card for new symptoms */\n            return (\n                <SymptomCard\n                    key={symptom.tempID}\n                    tempID={symptom.tempID}\n                    name={symptom.typeName}\n                    isNull={symptom.isNull}\n                    onisNullChange={handle_isNull_changed}\n                    severity={ symptom.severity? symptom.severity:null }\n                    onSeverityChange={handle_severity_changed}\n                    deleteSymptomType={setDeleteSymptomType}\n                />\n            );\n    });\n\n    /** Rendering */\n    if(toURL.path) {\n        return(\n            <Redirect to={{\n                    pathname: toURL.path,\n                    state: toURL.state? toURL.state:null\n                }}\n            />\n        )\n    }\n\n    return (\n        <div className='page'>\n            <p style={{ marginTop:'20px' }}>\n                <TodayIcon color=\"primary\" style={{verticalAlign:'text-bottom'}} /> &nbsp; {currentDateTime}\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <span onClick={ ()=>{set_IsOpenMicroEnvSelect_dialog(true);} } style={{cursor:'pointer'}}>\n                    <BusinessIcon color=\"primary\" style={{verticalAlign:'text-bottom'}} /> &nbsp; Attributes\n                </span>\n            </p>\n            <p style={{textAlign:'center'}}>Mong Kok, Kowloon</p>\n            <div style={{paddingTop:5}}>\n                {symptomCards}\n                <br/>\n                <div id='addNewSymptom_div' onClick={open_addNewSymptomType_dialog} style={{marginBottom:100, cursor:'pointer'}}>\n                    <img src={plusIcon} width={24} height={24} style={{verticalAlign:'text-bottom'}} /> &nbsp;&nbsp;\n                    <Typography variant='h6' style={{display:'inline-block'}}>Add New Symptom</Typography>\n                </div>\n            </div>\n\n            {/* Add New Symptom Type Dialog */}\n            <Dialog\n                open={isOpenAddNewSymptomType_dialog}\n                onClose={close_addNewSymptomType_dialog}\n            >\n                <DialogTitle style={{textAlign:'center'}}>Add Symptom</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        label=\"New Symptom Name\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={addNewSymptomType_inputValue}\n                        onChange={ (event)=>{set_addNewSymptomType_inputValue(event.target.value)} }\n                        error = {newSymptomInputError_flag.hoisted}\n                        helperText={newSymptomInputError_flag.hoisted? newSymptomInputError_flag.error:''}\n                        style={{minWidth:'24ch'}}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={close_addNewSymptomType_dialog} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={addNewSymptomType} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            {/* Save New Symptoms Dialog */}\n            <Dialog\n                open={isOpenSaveNewSymptoms_dialog}\n                onClose={close_saveNewSymptoms_dialog}\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        Are you sure? Once saved, you are now allowed to edit or remove it.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={userConfirmedSaveNewSymptoms} color=\"primary\">\n                        Confirm\n                    </Button>\n                    <Button onClick={close_saveNewSymptoms_dialog} color=\"primary\" autoFocus>\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            {/* Micro Environment Selection Dialog */}\n            <MicroEnvSelect_Dialog\n                isOpen={isOpenMicroEnvSelect_dialog}\n                close={close_microEnvSelect_dialog}\n                microEnvState={microEnvStateRef.current}\n                setMicroEnvState={setMicroEnvState}\n            />\n\n        </div>\n    );\n}\n\n\nfunction getCurrentPosition(geolocationOptions) {\n    return new Promise( (resolve, reject) => {\n        window.navigator.geolocation.getCurrentPosition(resolve, reject, geolocationOptions);\n    });\n}","import React, {useState, useEffect, useRef} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from \"@material-ui/core/Switch\";\n\n\nexport default function Settings() {\n    return (\n        <div className='page'>\n            <Typography variant='h6' color='primary'>Settings</Typography>\n            <br/>\n            <div style={{textAlign:'left'}}>\n                <Typography variant='h5' color='primary'>PUSH NOTIFICATION</Typography>\n                <Divider/>\n                <br/>\n                <Typography variant='body1'>\n                    <span style={{verticalAlign:\"sub\"}}>Receive input reminder</span>\n                    <FormControlLabel control={<Switch color='primary' />} style={{float:'right'}}/>\n                </Typography>\n                <br/>\n                <Divider/>\n            </div>\n            <br/>\n            <br/>\n            <div style={{textAlign:'left'}}>\n                <Typography variant='h5' color='primary'>EXPORT</Typography>\n                <Divider/>\n                <br/>\n                <Typography variant='body1'>\n                    <span style={{verticalAlign:\"sub\"}}>Export correlation chart as image</span>\n                </Typography>\n                <br/>\n                <Divider/>\n                <br/>\n                <Typography variant='body1'>\n                    <span style={{verticalAlign:\"sub\"}}>Export data as csv</span>\n                </Typography>\n                <br/>\n                <Divider/>\n            </div>\n\n        </div>\n    );\n}","import React, {useState, useEffect, useRef, useContext} from 'react';\nimport usePrevious from \"../components/usePrevious\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport {DatePicker} from \"@material-ui/pickers\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Divider from \"@material-ui/core/Divider\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Container from \"@material-ui/core/Container\";\nimport format from 'date-fns/format';\nimport {DatabaseContext, SystemServiceContext} from \"../App\";\nimport ChartJs from 'chart.js';\nimport $ from 'jquery';\nimport './Chart.css';\nimport parse from 'date-fns/parse';\nimport {Redirect} from \"react-router-dom\";\n\n\nexport default function Chart(props) {\n    const db = useContext(DatabaseContext);\n    const errorDialog = useContext(SystemServiceContext).errorDialog;\n\n    const [toURL, setToURL] = useState({path:null});\n\n    /* Note: In this page, 'symptom' and 'symptomType' is interchangeable here */\n    const [symptomType, setSymptomType] = useState(()=>{\n        if(props.location.state && props.location.state.symptom)\n            return props.location.state.symptom;\n\n        // if no 'symptomType' value passed, return null first. We will get the type from the DB (the one has most records) a bit later.\n        return null;\n    });\n    const prevSymptomType = usePrevious(symptomType);\n    /* If the symptom needs to be highlighted, there will be info in it. Otherwise, 'symptomHighlight' value is null */\n    const [symptomHighlight, setSymptomHighlight] = useState(()=>{\n        if(props.location.state && props.location.state.highlightSymptom)\n            return {\n                    currentSeverity: props.location.state.highlightedSymptomCurrentSeverity,\n                    currentPollutantsValue: props.location.state.highlightedSymptomCurrentPollutantsValue\n                };\n\n        return null;\n    })\n    const [dateRange, setDateRange] = useState(()=>{\n        if(props.location.state && props.location.state.dateRange)\n            return { start: props.location.state.dateRange.start, end: props.location.state.dateRange.end };\n\n        /*\n        *  If no dateRange is passed, start date will be set to null temporarily.\n        *  And will be set after obtaining value from the DB a bit later.\n        */\n        return { start: null, end: new Date() };\n    });\n    const prevDateRange = usePrevious(dateRange);\n\n    // The following property is used by the date picker dialog to temporarily hold a start date value\n    const [dateRange_startTemp, set_dateRange_startTemp] = useState(null);\n\n    const [pollutant, setPollutant] = useState('AQHI');\n    const [date_inDialog, set_date_inDialog] = useState(dateRange.start);\n    const [isOpenDatePickerDialog, setIsOpenDatePickerDialog] = useState(false);\n    const [mountingChart, setMountingChart] = useState(()=>{\n        if(symptomType && dateRange.start)\n            return 'mounting:started';\n\n        return null;\n    });\n\n    const chartCanvasRef = useRef(null);\n\n    const handleSymptomChange = (event) => {\n        setSymptomType(event.target.value);\n    };\n\n    const closeDatePickedInDatePickerDialog = () => {\n        if(dateRange_startTemp) {\n            set_dateRange_startTemp(null);\n        }\n\n        setIsOpenDatePickerDialog(false);\n    }\n\n    const handleDatePickedInDatePickerDialog = () => {\n        if(!dateRange_startTemp) { // just after the start date is picked\n            set_dateRange_startTemp(date_inDialog);\n            if(dateRange_startTemp > dateRange.end) {\n                set_date_inDialog(dateRange_startTemp);\n            } else {\n                set_date_inDialog(dateRange.end);\n            }\n        } else { // after the end date is picked\n            setDateRange({start:dateRange_startTemp, end:date_inDialog});\n            closeDatePickedInDatePickerDialog();\n        }\n    }\n    \n    const changePollutant = (newPollutant) => {\n        setPollutant(newPollutant);\n    }\n\n\n    /** When switching to the chart page without using the 'save' method in the home page,\n     *  the initial symptom type and start date don't have values, we use the following routine to fill them up\n     **/\n    useEffect( ()=>{\n        if(!symptomType && !dateRange.start) {\n            (async ()=>{\n                const objectStore = db.transaction('symptoms_pollutants_relation').objectStore('symptoms_pollutants_relation');\n                const index1 = objectStore.index('typeName');\n                try {\n                    let counts = await Promise.all(\n                                            props.symptomTypes.map((symptomType)=>{\n                                                let countRequest = index1.count(symptomType);\n                                                return new Promise((resolve, reject)=>{\n                                                    countRequest.onsuccess = ()=>{\n                                                        resolve(countRequest.result);\n                                                    };\n                                                    countRequest.onerror = ()=>{\n                                                        reject();\n                                                    };\n                                                });\n                                            })\n                    )\n                    const chosenSymptomTypeIndex = counts.indexOf(Math.max(...counts));\n                    let chosenSymptomType = props.symptomTypes[chosenSymptomTypeIndex];\n                    const index2 = objectStore.index('typeName,datetime,severity');\n                    const startDate_string = await new Promise((resolve, reject)=>{\n                                                    const boundKeyRange = IDBKeyRange.bound(\n                                                        [chosenSymptomType, '2000-01-01 00:00', Number.MIN_SAFE_INTEGER],\n                                                        [chosenSymptomType, '9999-12-31 00:00', Number.MAX_SAFE_INTEGER]\n                                                    );\n                                                    const request = index2.openCursor(boundKeyRange);\n                                                    request.onsuccess = (event)=>{\n                                                        let cursor = event.target.result;\n                                                        if(cursor) {\n                                                            resolve(cursor.value.datetime) // we just need the 1st record\n                                                        }\n                                                    };\n                                                    request.onerror = ()=> {\n                                                        reject();\n                                                    };\n                    })\n                    const startDate = parse(startDate_string, 'yyyy-MM-dd HH:mm', new Date());\n                    setSymptomType(chosenSymptomType);\n                    setDateRange({start: startDate, end:dateRange.end});\n                } catch(error) {\n                    console.log('Starting date retrieval in the database failed');\n                    errorDialog.setErrorMsg(null, 'Database \"starting date retrieval\" operation failed');\n                }\n            })();\n        }\n    },[symptomType, dateRange])\n\n    /** If the dependent value changes, start the mounting/re-mounting of the chart */\n    useEffect(()=>{\n        if(!symptomType || !dateRange.start) {\n            return;\n        }\n\n        if(mountingChart !== 'mounting:started') {\n            setMountingChart('mounting:started');\n\n            /* If 'symptom highlight' is on, we turn it off immediately once another symptom or date is chosen */\n            if(\n                symptomType !== prevSymptomType ||\n                dateRange.start !== prevDateRange.start ||\n                dateRange.end !== prevDateRange.end\n            ) {\n                setSymptomHighlight(null);\n            }\n        }\n    },[symptomType,dateRange,pollutant])\n\n    /** Get data from the DB & then plot graph */\n    useEffect(()=>{\n        if(!symptomType || !dateRange.start) {\n            return;\n        }\n\n        if(mountingChart === 'mounting:started') {\n            setMountingChart('mounting:dismounted') // During 'mounting:started' state, the chart is dismounted in the 'rendering' section.\n            return;\n        }\n\n        if(mountingChart === 'mounting:dismounted') {\n            let objectStore = db.transaction('symptoms_pollutants_relation').objectStore('symptoms_pollutants_relation');\n            let index = objectStore.index('typeName,datetime,severity');\n            let keyRange = IDBKeyRange.bound(\n                [symptomType, dateRange.start? format(dateRange.start, 'yyyy-MM-dd HH:mm'):'2000-01-01 00:00', Number.MIN_SAFE_INTEGER],\n                [symptomType, format(dateRange.end, 'yyyy-MM-dd HH:mm'), Number.MAX_SAFE_INTEGER]\n            );\n            let request = index.openCursor(keyRange);\n\n            /*\n                Build a data array to place the retrieved data systematically for plotting.\n                The size is 5 because we have 5 severity levels\n             */\n            let data = new Array(5);\n            let concentrationIntervalSize = {AQHI:1, pctAR:1, O3:10, NO2:10, SO2:1, PM10:2, PM2dot5:1};\n            let noOfConcentrationIntervals = 11;\n            for(let i=0; i<data.length; i++) {\n                data[i] = new Array(noOfConcentrationIntervals);\n                for(let j=0; j<noOfConcentrationIntervals; j++) {\n                    data[i][j] = 0;\n                }\n            }\n\n            request.onsuccess = (event)=>{\n                let cursor = event.target.result;\n                if(cursor) {\n                    let iIndex = cursor.value.severity-1;\n                    let jIndex = Math.floor( cursor.value.pollutantsValue[pollutant] / concentrationIntervalSize[pollutant] );\n                    data[iIndex][jIndex]++;\n                    cursor.continue();\n                } else {\n                    /** After all data is retrieved from the DB */\n                    let dataForHighLighting;\n                    let symptomHighLight_indexes;\n                    if(symptomHighlight) {\n                        symptomHighLight_indexes = {\n                            i: symptomHighlight.currentSeverity -1,\n                            j: Math.floor( symptomHighlight.currentPollutantsValue[pollutant] / concentrationIntervalSize[pollutant] )\n                        }\n                    }\n\n                    let dataForPlotting = [];\n                    for(let i=0; i<data.length; i++) {\n                        for(let j=0; j<noOfConcentrationIntervals; j++) {\n                            let severity = i + 1;\n                            let concentration;\n                            if(pollutant === 'AQHI') {\n                                concentration = j * concentrationIntervalSize[pollutant];\n                            } else {\n                                concentration = (j+0.5) * concentrationIntervalSize[pollutant];\n                            }\n                            let radius = data[i][j];\n                            dataForPlotting.push({ x:severity, y:concentration, r:radius });\n\n                            if(symptomHighLight_indexes && symptomHighLight_indexes.i===i && symptomHighLight_indexes.j===j) {\n                                dataForHighLighting = [ {x: severity, y: concentration, r: radius+6} ]\n                            }\n                        }\n                    }\n\n\n                    const COLORS = {\n                        AQHI: 'rgba(112,193,180,1)',\n                        pctAR: 'rgba(255,224,102,1)',\n                        O3: 'rgba(242,204,195,1)',\n                        NO2: 'rgba(171,163,210,1)',\n                        SO2: 'rgba(229,151,198,1)',\n                        PM10: 'rgba(168,237,255,1)',\n                        PM2dot5: 'rgba(168,237,255,1)'\n                    }\n\n                    let yAxisLabel;\n                    let yTickConfig = {};\n                    switch(pollutant) {\n                        case \"AQHI\":\n                            yAxisLabel = 'AQHI';\n                            yTickConfig = {\n                                min: 1,\n                                callback: function (value) {\n                                    if(parseInt(value) === 11) // The value of AQHI 10+ is 11\n                                        return value+'+';\n\n                                    return value;\n                                }\n                            }\n                            break;\n                        case 'pctAR':\n                            yAxisLabel = '%AR';\n                            break;\n                        default:\n                            yAxisLabel = 'concentration (μgm³)';\n                    }\n\n                    let datasets = [{\n                        data: dataForPlotting,\n                        backgroundColor: COLORS[pollutant]\n                    }];\n                    if(dataForPlotting.length!==0) {\n                        datasets.push({\n                            data: dataForHighLighting,\n                            backgroundColor: COLORS[pollutant].replace(\",1)\",\",0.5)\")\n                        })\n                    }\n\n                    new ChartJs(chartCanvasRef.current, {\n                        type: \"bubble\",\n                        data: {\n                            datasets: datasets\n                        },\n                        options: {\n                            events: ['click'],\n                            onClick: (event, activeElements) => {\n                                /* todo\n                                *   In practice, use dataForPlotting[activeElements._index] to access\n                                *   the corresponding value of that point\n                                */\n                                if(activeElements.length > 0)\n                                    setToURL({path: '/chartPoint_details'});\n                            },\n                            datasets: {\n                                bubble: { hoverRadius: 0, hitRadius: 10 }\n                            },\n                            tooltips: {\n                                enabled: false\n                            },\n                            legend: {\n                                display: false\n                            },\n                            scales:{\n                                xAxes:[{\n                                    scaleLabel:{\n                                        display: true,\n                                        labelString: 'seriousness'\n                                    }\n                                }],\n                                yAxes:[{\n                                    scaleLabel:{\n                                        display: true,\n                                        labelString: yAxisLabel\n                                    },\n                                    ticks: yTickConfig\n                                }],\n                            }\n                        }\n                    });\n                }\n            };\n            request.onerror = ()=>{\n                console.log('error');\n            }\n\n            setMountingChart('mounting:mounted');\n        }\n    },[mountingChart]);\n\n    /**\n     * Workaround: When entering this page from the bottom of 'home' page (i.e. the 'home' page is scrolled down),\n     * this page is also mysteriously scrolled down. This 'useEffect' is used to fix this issue.\n     * */\n    useEffect(()=> {\n        if($(window).scrollTop() > 0)\n            $(window).scrollTop(0);\n    },[]);\n\n\n    /** Rendering */\n    if(toURL.path) {\n        return(\n            <Redirect to={{ pathname: toURL.path }} />\n        )\n    }\n\n    if(!symptomType || !dateRange.start) {\n        return <></>;\n    }\n\n    return (\n        <div className='page'>\n            <div style={{textAlign:'center', marginTop:'15px'}}>\n                <TextField\n                    value={\n                        ( dateRange.start? format(dateRange.start,'ddMMM'):'      ' ) +\n                        ' - ' +\n                        format(dateRange.end, 'ddMMM')\n                    }\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><DateRangeIcon/></InputAdornment>,\n                    }}\n                    variant=\"outlined\"\n                    style={{width:'17ch'}}\n                    onClick={(event)=>{setIsOpenDatePickerDialog(true)}}\n                />\n                &nbsp;&nbsp;&nbsp;&nbsp;\n                <Select\n                    value={symptomType}\n                    onChange={handleSymptomChange}\n                    variant='outlined'\n                    style={{width:'10em'}}\n                >\n                    {\n                        props.symptomTypes.map( (symptomType) => <MenuItem key={symptomType} value={symptomType}>{symptomType}</MenuItem>)\n                    }\n                </Select>\n            </div>\n            <Container style={{marginTop:'15px'}}>\n                <div style={{display:'flex', justifyContent:'center', alignItems:'center'}}>\n                    <div style={{flex:'none'}}>\n                        {\n                            mountingChart==='mounting:started' ?\n                                <div style={{width:300, height:400, maxWidth:300, maxHeight:400, marginRight:20}} /> :\n                                <canvas\n                                    ref={chartCanvasRef}\n                                    style={{width:300, height:400, maxWidth:300, maxHeight:400, marginRight:20}}\n                                />\n                        }\n                    </div>\n                    <ButtonGroup style={{flex:'none'}}\n                        orientation=\"vertical\"\n                        color=\"primary\"\n                        size='small'\n                    >\n                        <Button onClick={()=>{changePollutant('AQHI')}} variant={pollutant==='AQHI'? 'contained':'outlined'}>AQHI</Button>\n                        <Button onClick={()=>{changePollutant('pctAR')}} variant={pollutant==='pctAR'? 'contained':'outlined'}>%AR</Button>\n                        <Button onClick={()=>{changePollutant('O3')}} variant={pollutant==='O3'? 'contained':'outlined'}>O<span className='sub'>3</span></Button>\n                        <Button onClick={()=>{changePollutant('NO2')}} variant={pollutant==='NO2'? 'contained':'outlined'}>NO<span className='sub'>2</span></Button>\n                        <Button onClick={()=>{changePollutant('SO2')}} variant={pollutant==='SO2'? 'contained':'outlined'}>SO<span className='sub'>2</span></Button>\n                        <Button onClick={()=>{changePollutant('PM10')}} variant={pollutant==='PM10'? 'contained':'outlined'}>PM<span className='sub'>10</span></Button>\n                        <Button onClick={()=>{changePollutant('PM2dot5')}} variant={pollutant==='PM2dot5'? 'contained':'outlined'}>PM<span className='sub'>2.5</span></Button>\n                    </ButtonGroup>\n                </div>\n                <p>Entry: {symptomType}</p>\n                {/*<Card style={{maxWidth:250, marginLeft:'auto', marginRight:'auto'}}>*/}\n                {/*    <CardContent>*/}\n                {/*        <div style={{float:'left'}}>AQHI</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*        <Divider style={{clear:'both'}}/>*/}\n                {/*        <div style={{float:'left'}}>%AR</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*        <Divider style={{clear:'both'}}/>*/}\n                {/*        <div style={{float:'left'}}>O3</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*        <Divider style={{clear:'both'}}/>*/}\n                {/*        <div style={{float:'left'}}>NO2</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*        <Divider style={{clear:'both'}}/>*/}\n                {/*        <div style={{float:'left'}}>SO2</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*        <Divider style={{clear:'both'}}/>*/}\n                {/*        <div style={{float:'left'}}>PM10</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*        <Divider style={{clear:'both'}}/>*/}\n                {/*        <div style={{float:'left'}}>PM2.5</div> <div style={{float:'right'}}>r<sup>2</sup>=0.2814</div>*/}\n                {/*    </CardContent>*/}\n                {/*</Card>*/}\n                <br/><br/>\n                <Typography variant='h6'>Health Advisory</Typography>\n                <Typography variant='body1' style={{textAlign:'left'}}>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                </Typography>\n            </Container>\n\n            {/* Dialog for date picker */}\n            <Dialog\n                open={isOpenDatePickerDialog}\n                onEnter={()=>{set_date_inDialog(dateRange.start)}}\n                onClose={closeDatePickedInDatePickerDialog}\n            >\n                <DialogTitle>{ dateRange_startTemp? 'To':'From' }</DialogTitle>\n                <DialogContent>\n                    <DatePicker\n                        autoOk\n                        orientation=\"landscape\"\n                        variant=\"static\"\n                        disableToolbar\n                        minDate={ dateRange_startTemp? dateRange_startTemp:null }\n                        disableFuture\n                        openTo=\"date\"\n                        value={date_inDialog}\n                        onChange={set_date_inDialog}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDatePickedInDatePickerDialog} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleDatePickedInDatePickerDialog} color=\"primary\">\n                        { dateRange_startTemp? 'Done':'Next' }\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </div>\n    );\n}","import React, {useState, useEffect, useRef, useContext} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from '@material-ui/core/CardContent';\nimport './ChartPoint_Details.css';\nimport FilterHdrIcon from '@material-ui/icons/FilterHdr';\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\n\nexport default function ChartPoint_details(props) {\n    const theme = useTheme();\n    const spanColor = {color:theme.palette.primary.main};\n\n    return(\n        <div className='page' >\n            <div>\n                <Typography\n                    variant='h5'\n                    gutterBottom\n                    style={{\n                        textAlign:'left',\n                        color:theme.palette.primary.main,\n                        fontWeight: 'bold'\n                    }}\n                >\n                    DETAILS\n                </Typography>\n                <Card className='card' raised={true} elevation={10} >\n                    <CardContent>\n                        <div className='card-content-div'>\n                            <div className='icon-row'>\n                                <FilterHdrIcon />\n                            </div>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Date & Time :</span> 4 Jun 2020 18:00\n                            </Typography>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Location :</span> Nathan Road\n                            </Typography>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Conc. of PM<sub>10</sub> :</span> 65 ug/m\n                            </Typography>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Seriousness :</span> 4\n                            </Typography>\n                        </div>\n                    </CardContent>\n                </Card>\n                <br/>\n                <Card className='card' raised={true} elevation={10} >\n                    <CardContent>\n                        <div className='card-content-div'>\n                            <div className='icon-row'>\n                                <AccountBalanceIcon/> <AcUnitIcon />\n                            </div>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Date & Time :</span> 16 Jun 2020 12:30\n                            </Typography>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Location :</span> Metro City\n                            </Typography>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Conc. of PM<sub>10</sub> :</span> 66.1 ug/m\n                            </Typography>\n                            <Typography className='typography-p' variant=\"body2\" component=\"p\" >\n                                <span style={spanColor}>Seriousness :</span> 3\n                            </Typography>\n                        </div>\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    )\n}","import React, {useState, useEffect, useRef} from 'react';\nimport {Switch, Route, useLocation, useHistory} from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Logo from './img/logo.svg';\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './App.css';\nimport Home from './pages/Home'\nimport Settings from \"./pages/Settings\";\nimport Chart from \"./pages/Chart\";\nimport ChartPoint_Details from \"./pages/ChartPoint_Details\";\nimport saveButton from './img/save.svg';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from \"@material-ui/core/Button\";\nimport ErrorIcon from '@material-ui/icons/Error';\n\n\nexport const SystemServiceContext = React.createContext({\n  // for use to lock the UI for very short time only\n  UILocker:{ isUILockerOn: null, UILockerSwitch: null, UILockerRequireCount:null},\n  // for use to lock the UI for much longer period\n  loader: { isLoading: null, loaderSwitch: null, loaderRequireCount:null },\n  // for showing error message\n  errorDialog: {setErrorMsg:null}\n});\n\nexport const DatabaseContext = React.createContext(null);\n\n\nexport default function App() {\n  let UILockerRequireCount = useRef(0).current;\n  let loaderRequireCount = useRef(0).current;\n\n  const history = useHistory();\n\n  const [isUILockerOn, setIsUILockerOn] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorDialogState, setErrorDialogState] = useState({isOpen:false, title:null, contentText:null});\n\n  const [db, setDB] = useState(null);\n\n  const [symptomTypes, setSymptomTypes] = useState([]);\n  const [saveNewSymptoms, setSaveNewSymptoms] = useState(false);\n\n  function UILockerSwitch(onOff) {\n    if(onOff === 'on') {\n      if(UILockerRequireCount === 0) {\n        setIsUILockerOn(true);\n      }\n      UILockerRequireCount++;\n    } else if(onOff === 'off') {\n      UILockerRequireCount--;\n      if(UILockerRequireCount === 0) {\n        setIsUILockerOn(false);\n      }\n    }\n  }\n\n  function loaderSwitch(onOff) {\n    if(onOff === 'on') {\n      if(loaderRequireCount === 0) {\n        setIsLoading(true);\n      }\n      loaderRequireCount++;\n    } else if(onOff === 'off') {\n      loaderRequireCount--;\n      if(loaderRequireCount === 0) {\n        setIsLoading(false);\n      }\n    }\n  }\n\n  function setErrorMsg(errorTitle, errorContentText) {\n    setErrorDialogState({isOpen: true, title: errorTitle, contentText: errorContentText});\n  }\n\n\n\n  /** Initialize the database */\n  useEffect(()=>{\n    let request = window.indexedDB.open(\"praiseHK-lite_symptom-analyzer_DB\", 1);\n    request.onupgradeneeded = function(event) {\n      let db = event.target.result;\n\n      // Create an objectStore to hold information about symptom types\n      let objectStore1 = db.createObjectStore(\"symptom_types\", {keyPath: 'id', autoIncrement: true});\n      /* Create indices for \"symptoms_types\" object store */\n      objectStore1.createIndex(\"symptom_type_name\", 'name', { unique: true });\n      // Add default symptom type name to the object store\n      let default_symptom_types = ['Wheezing', 'Phlegm', 'Shortness of breath', 'Chest tightness', 'Itchy eyes', 'Redness of eyes'];\n      objectStore1.transaction.oncomplete = (event) => {\n        let objectStore = db.transaction('symptom_types', 'readwrite').objectStore('symptom_types');\n        default_symptom_types.forEach( (symptomType) => {\n          objectStore.add({name: symptomType});\n        });\n      }\n\n      // Create an objectStore to hold information about the relationship between symptoms and different pollutants\n      let objectStore2 = db.createObjectStore(\"symptoms_pollutants_relation\", {keyPath: 'id', autoIncrement: true});\n      /* Create indices for \"symptoms_pollutants_relation\" object store */\n      objectStore2.createIndex(\"datetime\", 'datetime', { unique: false });\n      objectStore2.createIndex(\"typeName\", \"typeName\", { unique: false });\n      objectStore2.createIndex('typeName,datetime,severity', ['typeName','datetime','severity'], {unique:false});\n    };\n    request.onsuccess = (event) => {\n        setDB(event.target.result);\n    };\n    request.onerror = function(event) {\n      console.log(\"Database initialization error\");\n    };\n  }, []);\n\n  /** Get the symptom types from the DB after initialized */\n  useEffect(()=>{\n    if(db) {\n      const objectStore = db.transaction('symptom_types').objectStore('symptom_types');\n      const request = objectStore.openCursor();\n      let symptom_types = [];\n      request.onsuccess = (event) => {\n        let cursor = event.target.result;\n        if(cursor) {\n          symptom_types.push(cursor.value.name);\n          cursor.continue();\n        } else {\n          setSymptomTypes(symptom_types);\n        }\n      };\n      request.onerror = () => {\n        console.log('Error: failed to get symptom types from the database');\n      };\n\n    }\n  },[db]);\n\n\n  /** Prepare for rendering */\n  let currentPath = useLocation().pathname;\n  if(currentPath === '/')\n    currentPath += 'home';\n  if(currentPath === '/android_asset/www/index.html') // specific for android only (when loaded for the 1st time)\n    currentPath = '/home';\n\n  let containerBackgroundColor;\n  if(currentPath === '/chartPoint_details') {\n    containerBackgroundColor = '#e6efff';\n  } else {\n    containerBackgroundColor = 'initial';\n  }\n\n\n  /** Rendering */\n  if(!db)\n    return <></>;\n  if(symptomTypes.length===0)\n    return <></>;\n  return (\n      <>\n        <Loader isLoading={isLoading} />\n        <UILocker isLocked={isUILockerOn} />\n        <ErrorDialog\n            state={errorDialogState}\n            setState={setErrorDialogState}\n        />\n\n        <DatabaseContext.Provider value={db}>\n          <SystemServiceContext.Provider\n              value={{\n                UILocker:{\n                  isUILockerOn: isUILockerOn,\n                  UILockerSwitch: UILockerSwitch,\n                  UILockerRequireCount: UILockerRequireCount\n                },\n                loader: {\n                  isLoading: isLoading,\n                  loaderSwitch: loaderSwitch,\n                  loaderRequireCount: loaderRequireCount\n                },\n                errorDialog: {\n                  setErrorMsg: setErrorMsg\n                }\n              }}\n          >\n            <div className=\"App\">\n              <AppBar color='inherit' position='sticky' style={{paddingTop:'10px', paddingBottom:'10px'}}>\n                <div>\n                  <img src={Logo} width={89} height={52} />\n                </div>\n              </AppBar>\n              <Container maxWidth='md' style={{ paddingTop:'10px', height:'100%', backgroundColor:containerBackgroundColor }}>\n                <Switch>\n                  <Route path='/settings' component={Settings} />\n                  <Route\n                      path='/chart'\n                      render={\n                        (props) => <Chart {...props} symptomTypes={symptomTypes}  />\n                      }\n                  />\n                  <Route path='/chartPoint_details' component={ChartPoint_Details} />\n                  <Route\n                      path='/'\n                      render={\n                        (props) => <Home\n                                      {...props}\n                                      symptomTypes={symptomTypes}\n                                      setSymptomTypes={setSymptomTypes}\n                                      saveNewSymptoms={saveNewSymptoms}\n                                      setSaveNewSymptoms={setSaveNewSymptoms}\n                                  />\n                      }\n                  />\n                </Switch>\n              </Container>\n              <Container maxWidth={false} style={{ position:'fixed', bottom:0, backgroundColor:'white'}}>\n                <BottomNavigation\n                    value={currentPath.substring(1)}\n                    onChange={(event, newPage) => {\n                      history.push('/' + newPage);\n                    }}\n                    showLabels\n                    style={{ marginLeft:'auto', marginRight:'auto', maxWidth:'500px' }}\n                >\n                  <BottomNavigationAction value='chart' icon={<BarChartIcon />} />\n                  <BottomNavigationAction value='home' icon={<HomeIcon />} />\n                  <BottomNavigationAction value='settings' icon={<SettingsIcon />} />\n                </BottomNavigation>\n                {\n                  currentPath === '/home'\n                  &&\n                  <img\n                      src={saveButton}\n                      onClick={ ()=>{setSaveNewSymptoms(true)} }\n                      style={{\n                        position:'absolute',\n                        bottom:'15px',\n                        left: '50%',\n                        WebkitTransform: 'translateX(-50%)',\n                        transform: 'translateX(-50%)',\n                        width: '64px',\n                        height: '64px',\n                        cursor: 'pointer'\n                      }}\n                  />\n                }\n              </Container>\n            </div>\n          </SystemServiceContext.Provider>\n        </DatabaseContext.Provider>\n      </>\n  );\n\n}\n\n\nfunction Loader(props) {\n  return(\n      <div className={`loader-modal-screen ${props.isLoading?'loading':'not-loading'}`}>\n        <CircularProgress style={{color:'grey'}} thickness={6} />\n      </div>\n  );\n}\n\nfunction UILocker(props) {\n  return(\n      <div className={`UILocker-modal-screen ${props.isLocked?'UI-locked':'UI-not-locked'}`} />\n  );\n}\n\nfunction ErrorDialog(props) {\n  const {isOpen, title, contentText} = props.state\n  function closeDialog() {\n    props.setState( {isOpen:false, title:null, contentText:null} );\n  }\n\n  return(\n      <Dialog\n          open={isOpen}\n          onClose={closeDialog}\n      >\n        <DialogTitle><ErrorIcon color='secondary' /> {title? title:'Error'}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{contentText}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeDialog} color=\"primary\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'cordova_script';\r\nimport {MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {StylesProvider} from '@material-ui/core/styles';\r\nimport {createMuiTheme} from \"@material-ui/core/styles\";\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\n\r\n\r\ndocument.addEventListener('deviceready', () => {\r\n\r\n    // Customize default theme\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {main:'#0091CE'}\r\n        }\r\n    });\r\n\r\n    ReactDOM.render(\r\n        <StylesProvider injectFirst>\r\n            {/* RouterBasename:browser-dev <Router basename=\"/~praise/praiseHK-lite_symptom-analyzer/dev\"> */}\r\n            {/* RouterBasename:browser-prod <Router basename=\"/~praise/praiseHK-lite_symptom-analyzer/prod\"> */}\r\n            <Router> {/* RouterBasename:localDev_mobile */}\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <ThemeProvider theme={theme}>\r\n                        <App />\r\n                    </ThemeProvider>\r\n                </MuiPickersUtilsProvider>\r\n            </Router>\r\n        </StylesProvider>\r\n        ,\r\n        document.getElementById('root')\r\n    );\r\n}, false);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}